name: Nightly Data Pipeline

on:
  schedule:
    - cron: "15 3 * * *"
  workflow_dispatch:
  push:
    paths:
      - "src/**"
      - "pyproject.toml"
      - ".github/workflows/nightly_pipeline.yml"

jobs:
  etl:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      AZURE_TEXT_ENDPOINT: ${{ secrets.AZURE_TEXT_ENDPOINT }}
      AZURE_TEXT_KEY: ${{ secrets.AZURE_TEXT_KEY }}
      REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
      REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
      REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install project (plus praw)
        run: |
          pip install -e .
          pip install praw

      - name: Show which secrets are set (no values)
        run: |
          python - <<'PY'
          import os
          for k in ["AZURE_TEXT_ENDPOINT","AZURE_TEXT_KEY",
                    "REDDIT_CLIENT_ID","REDDIT_CLIENT_SECRET","REDDIT_USER_AGENT",
                    "YOUTUBE_API_KEY"]:
              print(f"{k}: {'SET' if os.environ.get(k) else 'NOT SET'}")
          PY

      # ================== INGEST ==================
      - name: Ingest GDELT (news)
        if: ${{ hashFiles('src/ingest/gdelt_ingest.py') != '' }}
        run: python src/ingest/gdelt_ingest.py
        continue-on-error: true

      - name: Ingest Reddit (public discussion)
        if: ${{ hashFiles('src/ingest/reddit_ingest.py') != '' && env.REDDIT_CLIENT_ID != '' && env.REDDIT_CLIENT_SECRET != '' && env.REDDIT_USER_AGENT != '' }}
        run: python src/ingest/reddit_ingest.py
        continue-on-error: true

      - name: Ingest YouTube (comments)
        if: ${{ hashFiles('src/ingest/youtube_ingest.py') != '' && env.YOUTUBE_API_KEY != '' }}
        run: python src/ingest/youtube_ingest.py
        continue-on-error: true

      # ===== Seed only if no raw parquet exists after ingestion =====
      - name: Seed sample data if none ingested yet
        run: |
          python - <<'PY'
          import pathlib, pandas as pd
          raw = pathlib.Path("data/raw")
          raw.mkdir(parents=True, exist_ok=True)
          if not any(raw.glob("*.parquet")):
            df = pd.DataFrame([
              {"Program":"Cosmetology","Description":"Inspection was quick and professional.","Date":"2025-02-05"},
              {"Program":"Electricians","Description":"Confusing online portal messages.","Date":"2025-03-18"},
            ])
            df.to_parquet(raw/"seed.parquet", index=False)
            print("Seeded data/raw/seed.parquet")
          else:
            print("Raw parquet already present; no seed needed.")
          PY

      - name: List raw files (debug)
        run: |
          pwd
          ls -l data/raw || true

      # ================== TRANSFORM / NLP / AGGREGATES / SITE ==================
      - name: Clean & normalize
        if: ${{ hashFiles('src/transform/clean_normalize.py') != '' }}
        run: python src/transform/clean_normalize.py

      - name: Azure sentiment
        if: ${{ env.AZURE_TEXT_ENDPOINT != '' && env.AZURE_TEXT_KEY != '' }}
        run: python src/nlp/azure_sentiment.py

      - name: Local sentiment fallback (VADER)
        if: ${{ hashFiles('src/nlp/local_sentiment.py') != '' && (env.AZURE_TEXT_ENDPOINT == '' || env.AZURE_TEXT_KEY == '') }}
        run: python src/nlp/local_sentiment.py

      - name: Aggregates for BI
        run: |
          if [ -f "data/processed/tdlr_scored.parquet" ]; then
            python src/analytics/aggregates.py
          else
            echo "Skipping aggregates: scored parquet not found."
          fi

      - name: Build Pages site
        run: |
          if [ -f "data/processed/exports/program_month_sentiment.csv" ]; then
            python src/viz/build_site.py
          else
            echo "Skipping site build: exports CSV not found."
          fi

      - name: Commit docs and exports
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/ data/processed/exports/*.csv || true
          git commit -m "nightly: refresh charts and exports" || echo "No changes"
          git push
